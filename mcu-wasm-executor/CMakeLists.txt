# Copyright (C) 2019 Intel Corporation.  All rights reserved.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

cmake_minimum_required(VERSION 3.8.2)

find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})
set(WAMR_ROOT_DIR $ENV{WAMR_ROOT_DIR})

# Check if WAMR_ROOT_DIR was set
if(NOT WAMR_ROOT_DIR)
    message(FATAL_ERROR "Environment variable 'WAMR_ROOT_DIR' is not defined. Please set it before configuring.")
endif()

project(wamr)

enable_language (ASM)

set (WAMR_BUILD_PLATFORM "zephyr")

set (WAMR_BUILD_TARGET "THUMBV7_VFP")
set (WAMR_BUILD_INTERP 1)
set (WAMR_BUILD_JIT 0)
set (WAMR_BUILD_AOT 1)
set (WAMR_BUILD_FAST_JIT 0)
set (WAMR_BUILD_LIBC_BUILTIN 1)
set (WAMR_BUILD_LIBC_WASI 0)
set (WAMR_BUILD_LIB_PTHREAD 0)
set (WAMR_BUILD_GLOBAL_HEAP_POOL 1)
set (WAMR_BUILD_GLOBAL_HEAP_SIZE 1638912) 



include (${WAMR_ROOT_DIR}/build-scripts/runtime_lib.cmake)
include (${WAMR_ROOT_DIR}/core/shared/platform/common/math/platform_api_math.cmake)

zephyr_library_include_directories(${ZEPHYR_BASE}/../modules/hal/ambiq)

target_sources(app PRIVATE
               ${WAMR_RUNTIME_LIB_SOURCE}
               src/main.c)

option(MNIST_MLIR "Use the MNIST MLIR implementation" OFF)
option(MNIST_LLVM "Use the MNIST LLVM implementation" OFF)
option(ATAX_MLIR "Use the ATAX MLIR implementation" OFF)
option(ATAX_LLVM "Use the ATAX LLVM implementation" OFF)
option(BICG_MLIR "Use the BICG MLIR implementation" OFF)
option(BICG_LLVM "Use the BICG LLVM implementation" OFF)
option(DOITGEM_MLIR "Use the DOITGEM MLIR implementation" OFF)
option(DOITGEM_LLVM "Use the DOITGEM LLVM implementation" OFF)
option(GEMM_MLIR "Use the GEMM MLIR implementation" OFF)
option(GEMM_LLVM "Use the GEMM LLVM implementation" OFF)
option(GEMVER_MLIR "Use the GEMVER MLIR implementation" OFF)
option(GEMVER_LLVM "Use the GEMVER LLVM implementation" OFF)
option(GESUMMV_MLIR "Use the GESUMMV MLIR implementation" OFF)
option(GESUMMV_LLVM "Use the GESUMMV LLVM implementation" OFF)
option(MVT_MLIR "Use the MVT MLIR implementation" OFF)
option(MVT_LLVM "Use the MVT LLVM implementation" OFF)
option(SYMM_MLIR "Use the SYMM MLIR implementation" OFF)
option(SYMM_LLVM "Use the SYMM LLVM implementation" OFF)
option(SYR2K_MLIR "Use the SYR2K MLIR implementation" OFF)
option(SYR2K_LLVM "Use the SYR2K LLVM implementation" OFF)
option(THREE_MM_MLIR "Use the THREE_MM MLIR implementation" OFF)
option(THREE_MM_LLVM "Use the THREE_MM LLVM implementation" OFF)
option(TRMM_MLIR "Use the TRMM MLIR implementation" OFF)
option(TRMM_LLVM "Use the TRMM LLVM implementation" OFF)
option(TWO_MM_MLIR "Use the TWO_MM MLIR implementation" OFF)
option(TWO_MM_LLVM "Use the TWO_MM LLVM implementation" OFF)

if(MNIST_MLIR)
    target_sources(app PRIVATE src/mnist_mlir.h)
    target_compile_definitions(app PRIVATE MNIST_MLIR)
elseif(MNIST_LLVM)
    target_sources(app PRIVATE src/mnist_llvm.h)
    target_compile_definitions(app PRIVATE MNIST_LLVM)
elseif(ATAX_MLIR)
    target_sources(app PRIVATE src/atax_mlir.h)
    target_compile_definitions(app PRIVATE ATAX_MLIR)
elseif(ATAX_LLVM)
    target_sources(app PRIVATE src/atax_llvm.h)
    target_compile_definitions(app PRIVATE ATAX_LLVM)
elseif(BICG_MLIR)
    target_sources(app PRIVATE src/bicg_mlir.h)
    target_compile_definitions(app PRIVATE BICG_MLIR)
elseif(BICG_LLVM)
    target_sources(app PRIVATE src/bicg_llvm.h)
    target_compile_definitions(app PRIVATE BICG_LLVM)
elseif(DOITGEN_MLIR)
    target_sources(app PRIVATE src/doitgen_mlir.h)
    target_compile_definitions(app PRIVATE DOITGEN_MLIR)
elseif(DOITGEN_LLVM)
    target_sources(app PRIVATE src/doitgen_llvm.h)
    target_compile_definitions(app PRIVATE DOITGEN_LLVM)
elseif(GEMM_MLIR)
    target_sources(app PRIVATE src/gemm_mlir.h)
    target_compile_definitions(app PRIVATE GEMM_MLIR)
elseif(GEMM_LLVM)
    target_sources(app PRIVATE src/gemm_llvm.h)
    target_compile_definitions(app PRIVATE GEMM_LLVM)
elseif(GEMVER_MLIR)
    target_sources(app PRIVATE src/gemver_mlir.h)
    target_compile_definitions(app PRIVATE GEMVER_MLIR)
elseif(GEMVER_LLVM)
    target_sources(app PRIVATE src/gemver_llvm.h)
    target_compile_definitions(app PRIVATE GEMVER_LLVM)
elseif(GESUMMV_MLIR)
    target_sources(app PRIVATE src/gesummv_mlir.h)
    target_compile_definitions(app PRIVATE GESUMMV_MLIR)
elseif(GESUMMV_LLVM)
    target_sources(app PRIVATE src/gesummv_llvm.h)
    target_compile_definitions(app PRIVATE GESUMMV_LLVM)
elseif(MVT_MLIR)
    target_sources(app PRIVATE src/mvt_mlir.h)
    target_compile_definitions(app PRIVATE MVT_MLIR)
elseif(MVT_LLVM)
    target_sources(app PRIVATE src/mvt_llvm.h)
    target_compile_definitions(app PRIVATE MVT_LLVM)
elseif(SYMM_MLIR)
    target_sources(app PRIVATE src/symm_mlir.h)
    target_compile_definitions(app PRIVATE SYMM_MLIR)
elseif(SYMM_LLVM)
    target_sources(app PRIVATE src/symm_llvm.h)
    target_compile_definitions(app PRIVATE SYMM_LLVM)
elseif(SYR2K_MLIR)
    target_sources(app PRIVATE src/syr2k_mlir.h)
    target_compile_definitions(app PRIVATE SYR2K_MLIR)
elseif(SYR2K_LLVM)
    target_sources(app PRIVATE src/syr2k_llvm.h)
    target_compile_definitions(app PRIVATE SYR2K_LLVM)
elseif(THREE_MM_MLIR)
    target_sources(app PRIVATE src/three_mm_mlir.h)
    target_compile_definitions(app PRIVATE THREE_MM_MLIR)
elseif(THREE_MM_LLVM)
    target_sources(app PRIVATE src/three_mm_llvm.h)
    target_compile_definitions(app PRIVATE THREE_MM_LLVM)
elseif(TRMM_MLIR)
    target_sources(app PRIVATE src/trmm_mlir.h)
    target_compile_definitions(app PRIVATE TRMM_MLIR)
elseif(TRMM_LLVM)
    target_sources(app PRIVATE src/trmm_llvm.h)
    target_compile_definitions(app PRIVATE TRMM_LLVM)
elseif(TWO_MM_MLIR)
    target_sources(app PRIVATE src/two_mm_mlir.h)
    target_compile_definitions(app PRIVATE TWO_MM_MLIR)
elseif(TWO_MM_LLVM)
    target_sources(app PRIVATE src/two_mm_llvm.h)
    target_compile_definitions(app PRIVATE TWO_MM_LLVM)
endif()



target_compile_options(app PRIVATE -static -mthumb -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 -O3)